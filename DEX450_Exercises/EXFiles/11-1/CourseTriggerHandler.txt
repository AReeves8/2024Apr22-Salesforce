public with sharing class CourseTriggerHandler {

    static final String RETIRED = 'Retired';
    static final String ENROLLED = 'Enrolled';
    static final String SCHEDULED = 'Scheduled';
    static final String CANCELLED = 'Cancelled';
    static final String ERROR_MESSAGE = 'Course has enrolled students';

    public static void checkStatus(List<Course__c> triggerNew, Map<Id, Course__c> oldMap, Map<Id, Course__c> newMap) {

        /**
        *  If a Course Status is changed to retired, then we need to
        *  check to see if there are any Course Delivery records marked
        *  as Scheduled and if there is at least one attendee marked
        *  as Enrolled, then the change to retired should not happen
        *  and an error passed back
        */

        // TODO #1: Declare a variable whose type is a Set of type Id named 
        //   courseIds and initialize it to a newly constructed Set.


        // Loop through all Course Delivery records to look for attendees
        for ( Course__c course :  triggerNew) {
            if ( oldMap.get(course.Id).Status__c != RETIRED && course.Status__c == RETIRED ) {

                // TODO #2: Add the Id field of the course to the courseIds set


                // TODO #3: Remove the code from line 32 to line 51 (the  
                //   query and for loop) because it has been pasted below 
                //   outside of the loop
                List<Course_Delivery__c> cds = [SELECT Id, Course__c, Status__c, (SELECT Status__c FROM Course_Attendees__r WHERE Status__c = :ENROLLED)
                                                FROM Course_Delivery__c
                                                WHERE Course__c = :course.Id];
                for (Course_Delivery__c cd : cds) {
                    if ( cd.Status__c == 'Scheduled' && cd.Course_Attendees__r.size() > 0 ) {
                        newMap.get(cd.Course__c).addError(ERROR_MESSAGE);
                    } else {
                        // Change the status of the Course Delivery record to 'Cancelled'
                        cd.Status__c = CANCELLED;
                        update cd;
                    }
                }
            }
        }

        // TODO #4: Write an if statement that checks to see if the size of 
        //   the set named courseIds is greater than 0.  This if will enclose 
        //   all the remaining code in this class.  You will close the if 
        //   statement with TODO #9.


            // TODO #5: Replace the assignment of the variable cds with a 
            //   SOQL for loop that has an iterator of type List whose 
            //   elements are Course Delivery objects named cds.  The final 
            //   } for this loop will be TODO #8

            // TODO #6: Modify the following SOQL query. Replace the existing 
            //   WHERE clause in the outer query with a new WHERE clause that 
            //   checks for two conditions:
            //      1. Check for a course delivery status of SCHEDULED
            //      2. Check that Course__c is IN the Set of courseIds.
            List<Course_Delivery__c> cds = [SELECT Id, Course__c, Status__c,
                                               (SELECT Status__c 
                                                FROM Course_Attendees__r
                                                WHERE Status__c = :ENROLLED)
                                            FROM Course_Delivery__c
                                            WHERE Course__c = :course.Id];
                for (Course_Delivery__c cd : cds) {

                // TODO #7: In the if statement remove the first condition 
                //   check that looks to see if the course delivery status 
                //   is scheduled.  Add a new condition at the beginning of 
                //   that if that checks to see if the Course_Attendees__r 
                //   is not equal to null.
                    if ( cd.Status__c == 'Scheduled'  && 
                                        cd.Course_Attendees__r.size() > 0 ) {
                        newMap.get(cd.Course__c).addError(ERROR_MESSAGE);
                    } else {
                        // Change the status of the Course Delivery record 
                        //   to 'Cancelled'
                        cd.Status__c = CANCELLED;
                        update cd;
                    }
               }
            // TODO #8: Add the closing } for the SOQL for loop

        // TODO #9: Add the closing } for the if statement

    }
}
