trigger CourseDeliveryTrigger on Course_Delivery__c (before insert, before update) {

    // Retrieve the Custom Metadata Type record for this trigger name
    Trigger_Switch__mdt tsw = Trigger_Switch__mdt.getInstance('CourseDeliveryTrigger');

    // If no Custom Metadata Type record found or if the active flag is set to true then execute the trigger logic
    if (tsw == null || tsw.Active_Flag__c == true) {
        
        //TODO #1: Review the for loop to see how we are populating allHolidays
        //  We have assumed that there are no recurring Holidays, for simplicity's sake.
        Set<Date> allHolidays = new Set<Date>();
        for (Holiday h : [SELECT ActivityDate FROM Holiday]) {
            allHolidays.add(h.ActivityDate);
        }
        
        for (Course_Delivery__c courseDelivery : Trigger.new) {

            // Always check Inserts, but only check Updates when the Delivery Date just changed:
            Boolean checkDate = (Trigger.isInsert || 
                                Trigger.oldMap.get(courseDelivery.Id).Start_Date__c != courseDelivery.Start_Date__c);
                                
            if (checkDate && courseDelivery.Start_Date__c != NULL) {

                //TODO #2: Prevent the invoking DML action if the Start Date is 
                //  in the allHolidays set.  Create an If statement that 
                //  determines if the Set allHolidays contains the courseDelivery 
                //  Start Date. Use the addError method of the sObject class to
                //  add the following error to the courseDelivery sObject:
                //  Course Delivery cannot be scheduled because it starts on a holiday.
                if (allHolidays.contains(courseDelivery.Start_Date__c)) {
                    courseDelivery.Start_Date__c.addError(Label.Invalid_Delivery_Start_Date);
                }
            }
        }
    }
}